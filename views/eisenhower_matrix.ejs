<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eisenhower Matrix</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel="stylesheet">
    <link rel="icon" type="image/png" href="/images/logo.png" >
    <link rel="stylesheet" href="/css/eisenhower.css">
</head>
<body style="height: 800px; padding-left: 90px">
    <div class="header">
      <div class="left">
        <img class="logoimage" src="/images/logo.png" alt="zenith logo" />
      </div>

      <h1 class="mid">Eisenhower Matrix</h1>

      <div class="right"></div>
    </div>


    <!-- ---------Eisenhower---------------->
    <div style="height: 200px; width: 200px; position: static; margin-top: 60px;"></div>
    <div class="matrix-container">
        <div class="quadrant" id="important-urgent">
            <!-- <button class="refresh-button" onclick="confirmReset('important-urgent')">↻</button> -->
            <h3>Important & Urgent</h3>
            <button class="refresh-button" onclick="confirmReset('important-urgent')">↻</button>
            <div class="add-task-btn" onclick="addTask('important-urgent')">
                <!-- <img src="plus button.jpeg" alt="Add Task"> -->

            </div>
            <div class="tasks" id="tasks-1">
                <% tasksImportantUrgent.forEach(task => { %>
                    <div class="task">
                        <input type="checkbox" class="task-checkbox" id="<%= task._id %>" name="<%= task._id %>" onchange="deleteTask('<%= task._id %>')">
                        <label for="<%= task._id %>"><%= task.taskName %></label>
                        <button class="delete-button" onclick="deleteTask('<%= task._id %>')">x</button>
                    </div>
                <% }); %>


            </div>

        </div>

        <div class="quadrant" id="important-not-urgent">
            <!-- <button class="refresh-button" onclick="confirmReset('important-not-urgent')">↻</button> -->
            <h3>Important & Not Urgent</h3>
            <button class="refresh-button" onclick="confirmReset('important-not-urgent')">↻</button>
            <div class="add-task-btn" onclick="addTask('important-not-urgent')">
                <!-- <img src="plus button.jpeg" alt="Add Task"> -->
            </div>
            <div class="tasks" id="tasks-2">

                <% tasksImportantNotUrgent.forEach(task => { %>
                    <div class="task">
                        <input type="checkbox" class="task-checkbox" id="<%= task._id %>" name="<%= task._id %>" onchange="deleteTask('<%= task._id %>')">
                        <label for="<%= task._id %>"><%= task.taskName %></label>
                        <button class="delete-button" onclick="deleteTask('<%= task._id %>')">x</button>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="quadrant" id="not-important-urgent">
            <!-- <button class="refresh-button" onclick="confirmReset('not-important-urgent')">↻</button> -->
            <h3>Not Important & Urgent</h3>
            <button class="refresh-button" onclick="confirmReset('not-important-urgent')">↻</button>
            <div class="add-task-btn" onclick="addTask('not-important-urgent')">
                <!-- <img src="plus button.jpeg" alt="Add Task"> -->
            </div>
            <div class="tasks" id="tasks-3">

                <% tasksNotImportantUrgent.forEach(task => { %>
                    <div class="task">
                        <input type="checkbox" class="task-checkbox" id="<%= task._id %>" name="<%= task._id %>" onchange="deleteTask('<%= task._id %>')">
                        <label for="<%= task._id %>"><%= task.taskName %></label>
                        <button class="delete-button" onclick="deleteTask('<%= task._id %>')">x</button>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="quadrant" id="not-important-not-urgent">
            <!-- <button class="refresh-button" onclick="confirmReset('quadrant4')">↻</button> -->
            <h3>Not Important & Not Urgent</h3>
            <button class="refresh-button" onclick="confirmReset('not-important-not-urgent')">↻</button>
            <div class="add-task-btn" onclick="addTask('not-important-not-urgent')">
                <!-- <img src="plus button.jpeg" alt="Add Task"> -->
            </div>
            <div class="tasks" id="tasks-4">
                <% tasksNotImportantNotUrgent.forEach(task => { %>
                    <div class="task">
                        <input type="checkbox" class="task-checkbox" id="<%= task._id %>" name="<%= task._id %>" onchange="deleteTask('<%= task._id %>')">
                        <label for="<%= task._id %>"><%= task.taskName %></label>
                        <button class="delete-button" onclick="deleteTask('<%= task._id %>')">x</button>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    
    <script>
        let showInputBox = false;
    
        function adjustMatrixContainerHeight() {
            let quadrants = document.querySelectorAll(".quadrant");
            let matrixContainer = document.querySelector(".matrix-container");
    
            let totalHeight = 0;
            quadrants.forEach(quadrant => {
                totalHeight += quadrant.offsetHeight; // Use offsetHeight to consider padding and borders
                const tasks = quadrant.querySelectorAll(".task");
                tasks.forEach(task => {
                    totalHeight += task.offsetHeight; // Include the height of each task
                });
            });
        }
    
        // Object to store showInputBox for each quadrant
        const showInputBoxes = {};
    
    function addTask(quadrantId) {
    const taskText = prompt("Enter new task:");
    if (taskText) {
        const userId = '<%= user._id %>'; // Get user ID from the session
        const data = { userId, quadrant: quadrantId, taskName: taskText };
        console.log("Quadrant ID:", quadrantId);
        console.log("Task Text:", taskText);
        console.log("User ID:", userId);
        fetch('/addTask', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to add task');
            }
            return response.json();
        })
        .then(data => {
            console.log('Task created:', data);
            // Create the task element and add it to the DOM
            const list = document.getElementById(quadrantId);
            const headerElement = list.querySelector(".add-task-btn");
            const newTask = document.createElement("div");
            newTask.className = "task"; 
            newTask.innerHTML = `
                <input type="checkbox" class="task-checkbox" id="task${list.children.length}" name="task${list.children.length}">
                <label for="task${list.children.length}">${taskText}</label>
            `;
            addDeleteButton(newTask);
            newTask.style.marginTop = "3px";
            list.insertBefore(newTask, headerElement.nextSibling);
            adjustMatrixContainerHeight();
        })
        .catch(error => console.error('Error adding task:', error));
    }
}

    
        function addDeleteButton(task) {
            const deleteButton = document.createElement("button");
            deleteButton.className = "delete-button";
            deleteButton.innerHTML = "x";
            task.appendChild(deleteButton);
            deleteButton.addEventListener("click", function () {
                task.parentNode.removeChild(task);
                adjustMatrixContainerHeight();
            });
        }
    
        // Function to ask for confirmation and reset the quadrant
        function confirmReset(quadrantId) {
            const isConfirmed = confirm("Are you sure you want to reset this quadrant? All tasks will be removed.");
    
            if (isConfirmed) {
                const list = document.getElementById(quadrantId);
                const tasks = list.querySelectorAll(".task");
                tasks.forEach(task => list.removeChild(task)); // Remove all tasks from the quadrant
                adjustMatrixContainerHeight(); // Reset the quadrant size
    
                // Also, reset showInputBoxes to false to enable adding new tasks
                showInputBoxes[quadrantId] = false;
            }
        }
    
        const linkColor = document.querySelectorAll('.nav__link')
    
        function colorLink(){
            linkColor.forEach(l => l.classList.remove('active-link'))
            this.classList.add('active-link')
        }
    
        linkColor.forEach(l => l.addEventListener('click', colorLink))
    
        /*=============== SHOW HIDDEN MENU ===============*/
        const showMenu = (toggleId, navbarId) =>{
            const toggle = document.getElementById(toggleId),
            navbar = document.getElementById(navbarId)
    
            if(toggle && navbar){
                toggle.addEventListener('click', ()=>{
                    /* Show menu */
                    navbar.classList.toggle('show-menu')
                    /* Rotate toggle icon */
                    toggle.classList.toggle('rotate-icon')
                })
            }
        }
        showMenu('nav-toggle','nav')
    
    
        let subMenu = document.getElementById("subMenu");
                
        function toggleMenu(){
            subMenu.classList.toggle("open-menu");
        }
    
        function toggleDarkMode() {
            const body = document.body;
            const spacebt = document.querySelector('.spacebt');
            const radioInner = document.querySelector('.radio-inner');
    
            // Toggle the dark mode class on the body element
            body.classList.toggle('dark-mode');
    
            // Toggle the position of the radio button
            radioInner.style.transform = body.classList.contains('dark-mode')
            ? 'translateX(25px)'
            : '';
        } 

        function deleteTask(taskId) {
            const isConfirmed = confirm("Are you sure you want to delete this task?");
            if (isConfirmed) {
                fetch(`/deleteTask/${taskId}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        // Remove the task from the DOM
                        const taskElement = document.getElementById(taskId);
                        if (taskElement) {
                            taskElement.parentNode.removeChild(taskElement);
                        }
                    } else {
                        throw new Error('Failed to delete task');
                    }
                })
                .catch(error => console.error('Error deleting task:', error));
            }
        }
    </script>
    
    
</body>
</html>
